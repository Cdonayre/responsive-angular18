{
  "version": 3,
  "sources": ["src/app/core/guard/auth.guard.ts", "src/app/app.routes.ts"],
  "sourcesContent": ["import { inject } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\r\nimport AuthService from '../../auth/services/auth.service';\r\nimport { ROUTE_PATHS } from '../../global/constants/route.constants';\r\nimport { StorageEncryptService } from '../../services/storage/storage-encrypt.service';\r\n\r\nexport const authGuard: CanActivateFn = (  __route: ActivatedRouteSnapshot,\r\n  __state: RouterStateSnapshot\r\n) => {\r\n  const authService = inject(AuthService);\r\n  const localStorageServiceEncrypt = inject(StorageEncryptService);\r\n  const router = inject(Router);\r\n  const currentUser = authService.isAuthenticated();\r\n  if (currentUser) {\r\n    return true;\r\n  }\r\n  localStorageServiceEncrypt.clearData();\r\n  return router.navigate([ROUTE_PATHS.LOGIN]);\r\n};\r\n\r\nexport const AuthLoginGuard: CanActivateFn = (\r\n  __route: ActivatedRouteSnapshot,\r\n  __state: RouterStateSnapshot\r\n) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n  const currentUser = authService.isAuthenticated();\r\n  if (currentUser) {\r\n    return router.navigate([ROUTE_PATHS.DASHBOARD]);\r\n  } else {\r\n    return true;\r\n  }\r\n};", "import { Routes } from '@angular/router';\r\nimport { authGuard, AuthLoginGuard } from './core/guard/auth.guard';\r\n\r\nexport const routes: Routes = [\r\n    {path: '',redirectTo: 'login',pathMatch: 'full'},\r\n    {\r\n    path: 'login',\r\n    loadChildren: () => import('./auth/auth.routes').then((m) => m.AUTH_ROUTES),\r\n    canActivate: [AuthLoginGuard],\r\n    },\r\n    {\r\n    path: 'dashboard',\r\n    loadChildren: () =>\r\n      import('./admin/bussiness/business.routes').then((m) => m.ADMIN_ROUTES),\r\n    canActivate: [authGuard],\r\n    data: { breadcrumb: 'Inicio' },\r\n    },\r\n  // {\r\n  //   path: 'sidebar',\r\n  //   loadChildren: () =>\r\n  //     import('./shared/sidebar/sidebar.component').then((m) => m.SidebarComponent),\r\n  //   canActivate: [authGuard],\r\n  //   data: { breadcrumb: 'Inicio' },\r\n  // },\r\n  { path: '**', redirectTo: 'not-found' },\r\n];\r\n"],
  "mappings": ";;;;;;;;;;;AAMO,IAAM,YAA2B,CAAG,SACzC,YACE;AACF,QAAM,cAAc,OAAO,WAAW;AACtC,QAAM,6BAA6B,OAAO,qBAAqB;AAC/D,QAAM,SAAS,OAAO,MAAM;AAC5B,QAAM,cAAc,YAAY,gBAAe;AAC/C,MAAI,aAAa;AACf,WAAO;EACT;AACA,6BAA2B,UAAS;AACpC,SAAO,OAAO,SAAS,CAAC,YAAY,KAAK,CAAC;AAC5C;AAEO,IAAM,iBAAgC,CAC3C,SACA,YACE;AACF,QAAM,cAAc,OAAO,WAAW;AACtC,QAAM,SAAS,OAAO,MAAM;AAC5B,QAAM,cAAc,YAAY,gBAAe;AAC/C,MAAI,aAAa;AACf,WAAO,OAAO,SAAS,CAAC,YAAY,SAAS,CAAC;EAChD,OAAO;AACL,WAAO;EACT;AACF;;;AC7BO,IAAM,SAAiB;EAC1B,EAAC,MAAM,IAAG,YAAY,SAAQ,WAAW,OAAM;EAC/C;IACA,MAAM;IACN,cAAc,MAAM,OAAO,qBAAoB,EAAE,KAAK,CAAC,MAAM,EAAE,WAAW;IAC1E,aAAa,CAAC,cAAc;;EAE5B;IACA,MAAM;IACN,cAAc,MACZ,OAAO,qBAAmC,EAAE,KAAK,CAAC,MAAM,EAAE,YAAY;IACxE,aAAa,CAAC,SAAS;IACvB,MAAM,EAAE,YAAY,SAAQ;;;;;;;;;EAS9B,EAAE,MAAM,MAAM,YAAY,YAAW;;",
  "names": []
}
